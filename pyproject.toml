[project]
name = "waldiez"
description = 'waldiez'
authors = [
  { name = 'Panagiotis Kasnesis', email = 'pkasnesis@waldiez.io' },
  { name= 'Lazaros Toumanidis', email= 'laztoum@waldiez.io' },
  { name = 'Stella Ioannidou', email = 'stella@humancentered.gr'}
]
readme = "README.md"
requires-python = '>=3.10,<3.14'
dynamic = ["version"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Operating System :: OS Independent",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
]
dependencies =[
    "aiocsv==1.3.2",
    "aiofiles==24.1.0",
    "aiosqlite==0.21.0",
    "asyncer==0.0.8",
    "numpy<=2.2.5",
    "nest_asyncio==1.6.0",
    "graphviz==0.20.3",
    "pandas>=2",
    "pyautogen[openai]==0.8.7",
    "jupytext",
    "rpds-py @ git+https://github.com/crate-py/rpds.git@v0.24.0 ;sys_platform == 'win32' and platform_machine == 'arm64'",
    "rpds-py @ git+https://github.com/crate-py/rpds.git@v0.24.0 ;sys_platform == 'win32' and platform_machine == 'ARM64'",
    "rpds-py @ git+https://github.com/crate-py/rpds.git@v0.24.0 ;sys_platform == 'win32' and platform_machine == 'aarch64'",
    "rpds-py @ git+https://github.com/crate-py/rpds.git@v0.24.0 ;sys_platform == 'win32' and platform_machine == 'AARCH64'",
    "parso==0.8.4",
    "pydantic>=2.10.2,<3",
    "typer>=0.9,<0.16",
    "httpx<1",
]

[project.urls]
homepage = 'https://waldiez.io'
repository = 'https://github.com/waldiez/python.git'
documentation = "https://waldiez.github.io/python/"
issues = "https://github.com/waldiez/python/issues"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.sdist]
packages = ["waldiez", "waldiez.*"]
exclude = [ "**/example.py", ".gitignore" ]

[tool.hatch.build.targets.wheel]
packages = ["waldiez", "waldiez.*"]
exclude = [ "**/example.py" ]

[project.optional-dependencies]
studio = [
    "waldiez_studio==0.4.3",
]
jupyter = [
    "waldiez_jupyter==0.4.3",
    'jupyterlab>=4.3.0',
]
dev = [
    'autoflake==2.3.1',
    'bandit==1.8.3',
    'black[jupyter]==25.1.0',
    'flake8==7.2.0',
    'isort==6.0.1',
    'mypy==1.15.0',
    'pandas-stubs==2.2.3.250308',
    'pre-commit==4.2.0',
    'pydocstyle==6.3.0',
    'pylint==3.3.6',
    'python-dotenv==1.1.0',
    'ruff==0.11.6',
    'types-pyyaml==6.0.12.20250402',
    'yamllint==1.37.0',
    'toml==0.10.2; python_version <= "3.10"',
    'types-toml==0.10.8.20240310',
]
ag2_extras =[
    # models
    'pyautogen[anthropic]==0.8.7',
    'pyautogen[bedrock]==0.8.7',
    'pyautogen[cohere]==0.8.7',
    'pyautogen[gemini]==0.8.7 ;sys_platform != "win32"',
    'pyautogen[gemini]==0.8.7 ;sys_platform == "win32" and platform_machine != "arm64" and platform_machine != "aarch64" and platform_machine != "ARM64" and platform_machine != "AARCH64"',
    'pyautogen[groq]==0.8.7',
    'pyautogen[lmm]==0.8.7',
    'pyautogen[mistral]==0.8.7',
    'pyautogen[ollama]==0.8.7',
    'pyautogen[together]==0.8.7 ;sys_platform != "win32"',
    'pyautogen[together]==0.8.7 ;sys_platform == "win32" and platform_machine != "arm64" and platform_machine != "aarch64" and platform_machine != "ARM64" and platform_machine != "AARCH64"',
    # utils
    'pyautogen[interop-crewai]==0.8.7',
    'pyautogen[interop-langchain]==0.8.7',
    "pyautogen[neo4j]==0.8.7 ;sys_platform != 'win32'",
    "pyautogen[neo4j]==0.8.7 ;sys_platform == 'win32' and platform_machine != 'arm64' and platform_machine != 'aarch64' and platform_machine != 'ARM64' and platform_machine != 'AARCH64'",
    'pyautogen[websurfer]==0.8.7',
    "chromadb>=0.5.10 ;sys_platform != 'win32'",
    "chromadb>=0.5.10 ;sys_platform == 'win32' and platform_machine != 'arm64' and platform_machine != 'aarch64' and platform_machine != 'ARM64' and platform_machine != 'AARCH64'",
    'pgvector>=0.4.0',
    "psycopg==3.2.6 ;sys_platform == 'linux'",
    "psycopg==3.2.6 ;sys_platform == 'win32' and platform_machine == 'arm64'",
    "psycopg==3.2.6 ;sys_platform == 'win32' and platform_machine == 'ARM64'",
    "psycopg==3.2.6 ;sys_platform == 'win32' and platform_machine == 'aarch64'",
    "psycopg==3.2.6 ;sys_platform == 'win32' and platform_machine == 'AARCH64'",
    "psycopg[binary]==3.2.6 ;sys_platform != 'linux' and platform_machine != 'arm64' and platform_machine != 'ARM64' and platform_machine != 'aarch64' and platform_machine != 'AARCH64'",
    'protobuf>=4.25.3',
    'pypdf',
    "pysqlite3-binary==0.5.4 ;sys_platform == 'linux' and platform_machine != 'arm64' and platform_machine != 'aarch64' and platform_machine != 'ARM64' and platform_machine != 'AARCH64'",
    'ipython',
    'markdownify',
    'beautifulsoup4',
    "sentence-transformers ;sys_platform == 'linux'",
    'huggingface-hub',
    "qdrant-client[fastembed] ;sys_platform != 'win32'",
    "qdrant-client[fastembed] ;sys_platform == 'win32' and platform_machine != 'arm64' and platform_machine != 'aarch64' and platform_machine != 'ARM64' and platform_machine != 'AARCH64'",
    'pgvector>=0.4.0',
    "psycopg[binary]>=3.2.6 ;sys_platform != 'win32'",
    "psycopg>=3.2.6 ;sys_platform == 'win32'",
    "embedchain ;sys_platform != 'win32'",
    "embedchain ;sys_platform == 'win32' and platform_machine != 'arm64' and platform_machine != 'aarch64' and platform_machine != 'ARM64' and platform_machine != 'AARCH64'",
    'langchain-community>=0.3.12,<1',
    'pydantic-ai>=0.0.21',
    'pymongo>=4.11',
    'wikipedia-api>=0.8.1, <1.0',
    'google-api-python-client>=2.163.0,<3.0',
    'google-auth-httplib2>=0.2.0,<0.3',
    'google-auth-oauthlib>=1.2.1,<2.0',
    'mcp>=1.4.0,<1.6',
]
test = [
    'pytest==8.3.5',
    'pytest-asyncio==0.26.0',
    'pytest-cov==6.1.1',
    'pytest-html==4.1.1',
    'pytest-sugar==1.0.0',
    'pytest-timeout==2.3.1',
    'pytest-xdist==3.6.1',
]
docs = [
  'mdx-include==1.4.2',
  'mdx_truly_sane_lists==1.3',
  'mkdocs==1.6.1',
  'mkdocs-jupyter==0.25.1',
  'mkdocs-macros-plugin==1.3.7',
  'mkdocs-material==9.6.12',
  'mkdocs-minify-html-plugin==0.3.1',
  'mkdocstrings[crystal,python]==0.29.1',
  'mkdocstrings-python==1.16.10'
]

[project.scripts]
waldiez = 'waldiez.cli:app'

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
[tool.hatch.version]
path = "waldiez/_version.py"
# black
[tool.black]
line-length = 80
skip-string-normalization=true
include = '''
    \.pyi?$
'''
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | .local
  | _build
  | __init__.py
  | .local
  | examples
  | waldiez_out
)/
'''

# mypy
[tool.mypy]
files = '.'
show_error_codes = true
# xcode/dmypy: follow-imports=silent not supported
# follow_imports = 'skip'
platform = 'linux'
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = false
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = false
no_implicit_reexport = true
strict_optional = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
plugins = [
  'pydantic.mypy'
]
exclude = [
    '.venv',
    '.local',
    'examples',
    'waldiez_out',
]

[[tool.mypy.overrides]]
module = "tests.*"
# with python < 3.13 we get seem to get 'call-arg' errors :(
# and with python>=3.13 'unused-ignore' : (
disable_error_code = ["call-arg"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

# isort
[tool.isort]
profile ='black'
skip=[
    '.venv',
    '.local',
    'examples',
    'waldiez_out',
]
include_trailing_comma=true
force_grid_wrap=0
use_parentheses=true
line_length=80

# pydocstyle
[tool.pydocstyle]
match-dir='([^!(.venv)].*)([^!(.local)].*)([^!(examples)].*)([^!(waldiez_out)].*)'

# pylint
[tool.pylint.master]
load-plugins = [
    'pylint.extensions.mccabe',
    'pylint.extensions.redefined_variable_type',
    'pylint.extensions.broad_try_clause',
    'pylint.extensions.no_self_use',
    'pylint.extensions.docparams',
]
extension-pkg-whitelist= []
# reports=true
recursive=true
fail-under=8.0
ignore=["CVS"]
ignore-paths = [
    ".venv",
    ".local*",
    "examples",
    "waldiez_out",
]

unsafe-load-any-extension="no"

[tool.pylint.messages_control]
enable=["c-extension-no-member"]
[tool.pylint.format]
max-line-length=80
[tool.pylint.similarities]
ignore-imports="yes"
ignore-signatures="yes"
min-similarity-lines=10
[tool.pylint.broad_try_clause]
max-try-statements=3
[tool.pylint.design]
max-args=11
max-attributes=11
max-positional-arguments=11
max-statements=50
[tool.pylint.string]
check-quote-consistency = true
check-str-concat-over-line-jumps = true
[tool.pylint.parameter_documentation]
accept-no-param-doc=false
accept-no-raise-doc=false
accept-no-return-doc=false
accept-no-yields-doc=false
# Possible choices: ['sphinx', 'epytext', 'google', 'numpy', 'default']
default-docstring-type = "numpy"

# bandit
[tool.bandit]
exclude_dirs = [
    ".venv",
    ".local",
    "examples",
    "waldiez_out",
]
# B104: bind to all interfaces (0.0.0.0)
# B110: allow pass on try/except
# B404: allow import subprocess
# B602, B603: allow shell=True (subprocess,popen)
skips = ['B104', 'B110', 'B404', 'B602', 'B603' ]
[tool.bandit.assert_used]
skips = ['*_test.py', '*/test_*.py']

# ruff
[tool.ruff]
line-length = 80
extend-exclude = [
    ".venv",
    ".local",
    "examples",
    "waldiez_out",
]

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F", "Q"]
ignore = []
# # Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# # Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# exclude = ["*.pyi", "*.j2"]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
line-ending = "lf"

# pytest
[tool.pytest.ini_options]
asyncio_mode = 'auto'
asyncio_default_fixture_loop_scope='session'
filterwarnings = [
  # DeprecationWarning:
  #   Type google._upb._message.MessageMapContainer uses PyType_Spec with a metaclass that has custom tp_new.
  #   This is deprecated and will no longer be allowed in Python 3.14.
  "ignore::DeprecationWarning",
]
python_files = [
    "tests.py",
    "test_*.py",
    "*_tests.py",
]
addopts = """
    -d \
    -s \
    -n auto \
    --exitfirst \
    --durations=10 \
    --color=yes \
    --timeout=120
"""


# coverage
[tool.coverage.run]
omit = [
  "example.py",
  "**/cli_extras/*.py",
]
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
]
fail_under = 80
precision = 2
